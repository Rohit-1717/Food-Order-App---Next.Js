// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model

model User {
  id          String    @id @default(cuid())
  fullName    String
  phoneNumber String    @unique
  email       String?
  avatar      String?
  dateOfBirth DateTime?
  gender      String?
  address     String?
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Review      Review[]
}

// Kitchen Model

model KitchenAdmin {
  id           String         @id @default(cuid())
  ownerName    String
  kitchenName  String
  phoneNumber  String         @unique
  email        String?
  avatar       String?
  address      String
  cuisineType  String?
  menuItems    Menu[]
  orders       Order[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Notification Notification[]
}

// Menu Model

model Menu {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  image        String
  price        Float
  type         DishType
  rating       Float?
  deliveryTime Int
  category     String
  discount     String?      // ‚Üê Change this from Float? to String?
  isAvailable  Boolean      @default(true)
  
  kitchen      KitchenAdmin @relation(fields: [kitchenId], references: [id])
  kitchenId    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Review       Review[]
}

enum DishType {
  VEG
  NON_VEG
}

// Order Model

model Order {
  id                 String        @id @default(cuid())
  userId             String
  user               User          @relation(fields: [userId], references: [id])
  kitchenId          String
  kitchen            KitchenAdmin  @relation(fields: [kitchenId], references: [id])
  userName           String
  items              Json // list of items [{ name, qty, price }]
  placedAt           DateTime      @default(now())
  paymentMode        PaymentMode
  isPaid             Boolean
  updateStatus       UpdateStatus?
  orderStatus        OrderStatus?
  isCancelled        Boolean       @default(false)
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum PaymentMode {
  UPI
  CASH
}

enum UpdateStatus {
  PREPARING
  READY
  OUT_FOR_DELIVERY
}

enum OrderStatus {
  ACCEPTED
  REJECTED
}

// Notification Model

model Notification {
  id        String       @id @default(cuid())
  message   String
  read      Boolean      @default(false)
  kitchen   KitchenAdmin @relation(fields: [kitchenId], references: [id])
  kitchenId String
  createdAt DateTime     @default(now())
}

// Review Model

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  menu      Menu     @relation(fields: [menuId], references: [id])
  menuId    String
  createdAt DateTime @default(now())
}

