// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// =========================
//        USER MODEL
// =========================
//

model User {
  id             String    @id @default(cuid())
  fullName       String
  phone          String?
  email          String    @unique
  hashedPassword String // ✅ keep only this
  avatar         String?
  dateOfBirth    DateTime?
  gender         String?
  address        String?
  orders         Order[]
  Review         Review[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

//
// ==============================
//      KITCHEN ADMIN MODEL
// ==============================
//

model KitchenAdmin {
  id             String         @id @default(cuid())
  ownerName      String
  kitchenName    String
  phone          String?
  email          String         @unique
  hashedPassword String         // ✅ ONLY this password field
  avatar         String?
  address        String?
  cuisineType    String?
  menuItems      Menu[]
  orders         Order[]
  Notification   Notification[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

//
// ==============================
//          MENU MODEL
// ==============================
//

model Menu {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  image        String
  price        Float
  type         DishType
  rating       Float?
  deliveryTime Int
  category     String
  discount     String? // kept as String?
  isAvailable  Boolean      @default(true)
  kitchen      KitchenAdmin @relation(fields: [kitchenId], references: [id])
  kitchenId    String
  Review       Review[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum DishType {
  VEG
  NON_VEG
}

//
// ==============================
//          ORDER MODEL
// ==============================
//

model Order {
  id                 String        @id @default(cuid())
  userId             String
  kitchenId          String
  user               User          @relation(fields: [userId], references: [id])
  kitchen            KitchenAdmin  @relation(fields: [kitchenId], references: [id])
  userName           String
  items              Json
  placedAt           DateTime      @default(now())
  paymentMode        PaymentMode
  isPaid             Boolean
  updateStatus       UpdateStatus?
  orderStatus        OrderStatus?
  isCancelled        Boolean       @default(false)
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum PaymentMode {
  UPI
  CASH
}

enum UpdateStatus {
  PREPARING
  READY
  OUT_FOR_DELIVERY
}

enum OrderStatus {
  ACCEPTED
  REJECTED
}

//
// ==============================
//       NOTIFICATION MODEL
// ==============================
//

model Notification {
  id        String       @id @default(cuid())
  message   String
  read      Boolean      @default(false)
  kitchen   KitchenAdmin @relation(fields: [kitchenId], references: [id])
  kitchenId String
  createdAt DateTime     @default(now())
}

//
// ==============================
//          REVIEW MODEL
// ==============================
//

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  menu      Menu     @relation(fields: [menuId], references: [id])
  menuId    String
  createdAt DateTime @default(now())
}

//
// ==============================
//            OTP MODEL
// ==============================
//

model Otp {
  id        String   @id @default(cuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otps")
}
